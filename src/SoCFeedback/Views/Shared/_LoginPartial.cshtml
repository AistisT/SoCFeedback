@using Microsoft.AspNetCore.Identity
@using SoCFeedback.Models
@using Microsoft.AspNetCore.Authorization;
@inject IAuthorizationService AuthorizationService
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@if (SignInManager.IsSignedIn(User))
{
    @if (await AuthorizationService.AuthorizeAsync(User, "Admin"))
    {       
            <ul class="nav navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" asp-area="" asp-controller="Levels" asp-action="Index" title="Levels"> Levels</a>
                    <a class="nav-link" asp-area="" asp-controller="Levels" asp-action="Create" title="Create Level"> Create Level</a>
                </li>
   
            </ul>    
    }
    <form asp-area="" asp-controller="Account" asp-action="LogOff" method="post" id="logoutForm" class="navbar-right">
        <ul class="nav navbar-nav navbar-right float-xs-right">
            <li class="nav-item">
                <a class="nav-link" asp-area="" asp-controller="Manage" asp-action="Index" title="Manage">Hello @UserManager.GetUserName(User)!</a>
            </li>
            <li class="nav-item">
                <button type="submit" class="btn nav-link btn-link navbar-btn">Log off</button>
            </li>
        </ul>
    </form>
}
else
{
    <ul class="nav navbar-nav float-xs-right ">
        <li class="nav-item"><a class="nav-link" asp-area="" asp-controller="Account" asp-action="Register">Register</a></li>
        <li class="nav-item"><a class="nav-link" asp-area="" asp-controller="Account" asp-action="Login">Staff Log in</a></li>
    </ul>
}
