@model Year
@using SoCFeedback.Enums
@{
    ViewData["Title"] = "Create Year Form";
}

<h2>Create</h2>
<form asp-action="Create">
    <div>
        <h4>Year Form</h4>
        <hr />
        <h5 class="text-danger">Only one year form can be active at a time! </h5>
        <h5 class="text-danger">Any currently pending or published forms will be automatically archived upon creation of a new year form.</h5>
        <h6 class="text-muted">Please only create new year form at the start of new academic year.</h6>
        <hr/>
        <div class="form-group row">
            <label asp-for="Year1" class="col-md-3 col-form-label"></label>
            <div class="col-md-2">
                <input asp-for="Year1" class="form-control" id="yearInput"/>
                <span asp-validation-for="Year1" class="text-danger"></span>
            </div>
            <div class="col-md-7 col-form-label "> Ending: <label class="font-weight-bold"id="endingYear"> @Html.DisplayFor(m => m.EndingYear)</label>
            </div>
            <script type="text/javascript">
                $('#yearInput').on('input',
                    function() {
                        $("#endingYear").text(
                            parseInt($('#yearInput').val()) + 1);
                    });
            </script>
        </div>
        <div class="row">
            <div class="col-md-12">
                <hr/>
                <h4>Modules running this year. Can be edited later, until published.</h4>
                <h6>Archived modules will not show up in this list. If required module can be set inactive for this academic year.</h6>
                <hr/>
                @for (var j = 0; j < Model.Levels.Count; j++)
                {
                    <input type="hidden" asp-for="@Model.Levels[j].Id"/>
                    <input type="hidden" asp-for="@Model.Levels[j].Title"/>
                    <span class=" text-primary h4 form-text">
                        @Html.DisplayFor(m => m.Levels[j].Title)
                    </span>
                    <ul class="list-group">
                        @for (var i = 0; i < Model.Modules.Count; i++)
                        {
                            if (Model.Modules[i].LevelId == Model.Levels[j].Id)
                            {
                                <li class=" list-group-item col-md-12">
                                    @Html.HiddenFor(m => m.Modules[i].Id) @Html.HiddenFor(m => m.Modules[i].Code) @Html.HiddenFor(m => m.Modules[i].Title) @Html.HiddenFor(m => m.Modules[i].LevelId)
                                    @Html.DisplayFor(m => m.Modules[i].Code) @Html.DisplayFor(m => m.Modules[i].Title)
                                    <select asp-for="@Model.Modules[i].RunningStatus" asp-items="Html.GetEnumSelectList<RunningStatus>()" class="float-sm-right"></select>
                                </li>
                            }
                        }
                    </ul>
                }
            </div>
        </div>
        <div class="form-group col-sm-12">
            <hr/>
            <input type="submit" id="submitButton" value="Create" class="btn btn-primary"/>
            <a asp-action="Index" class="float-sm-right">Back to List</a>
        </div>
    </div>
</form>